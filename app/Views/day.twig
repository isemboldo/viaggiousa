{% extends "layout.twig" %}
{% block title %}Giorno {{ day.giorno_num }} ‚Äî {{ day.titolo }}{% endblock %}

{% block content %}
<section class="day-page">
{# HERO FULL-BLEED ‚Äî esce dal container con un wrapper ‚Äúbreakout‚Äù #}
<div class="day-hero-breakout" aria-hidden="true">
  <figure class="day-hero-media">
    <img src="{{ day.immagine_copertina ?: (base_url ~ '/assets/images/cover-default.jpg') }}" alt="">
  </figure>
  <div class="day-hero-veil"></div>
</div>


  <div class="container">
    {# Meta + Heading #}
    <header class="day-head">
      <div class="meta">
        <span class="badge">Giorno {{ day.giorno_num }}</span>
        {% if day.data %}<span class="date">{{ day.data }}</span>{% endif %}
      </div>
      <h1 class="title">{{ day.titolo }}</h1>

      <div class="toolbar">
        <div class="left">
          {% if prev %}
            <a class="btn subtle" href="{{ base_url }}/giorno/{{ prev }}">‚Üê Giorno prec.</a>
          {% endif %}
        </div>
        <div class="center">
          <button class="btn index" type="button" data-open-index="1">‚ò∞ Tutti i giorni</button>
        </div>
        <div class="right">
          {% if next %}
            <a class="btn subtle" href="{{ base_url }}/giorno/{{ next }}">Giorno succ. ‚Üí</a>
          {% endif %}
        </div>
      </div>
    </header>

    {# === SEZIONI ======================================================= #}
    {% if sections|length > 0 %}
      <section class="story">
        {% for s in sections %}
          <article class="panel{% if loop.index is odd %} alt{% endif %}">
  <div class="panel-media">
  <div class="media-frame">
    {% if s.immagine %}
      <img src="{{ asset_url(s.immagine) }}" alt="" loading="lazy" decoding="async">
    {% endif %}
  </div>
</div>


  <div class="panel-body">
    <div class="panel-head">
      {# Occhiello sopra al titolo #}
      {% if s.sovratitolo %}
        <div class="eyebrow">{{ s.sovratitolo }}</div>
      {% endif %}

      {% if s.titolo %}
        <h3 class="h3">{{ s.titolo }}</h3>
      {% endif %}

      <div class="counters" aria-label="Feedback sezione" title="Feedback">
  <form class="fb-form" action="{{ base_url }}/api/section/{{ s.id }}/feedback" method="post">
    <input type="hidden" name="csrf" value="{{ csrf }}">
    <input type="hidden" name="action" value="like">
    <button class="fb-btn" data-action="like" data-section="{{ s.id }}" type="submit" title="Mi piace">
      üëç <span class="fb-like">{{ s.likes }}</span>
    </button>
  </form>

  <form class="fb-form" action="{{ base_url }}/api/section/{{ s.id }}/feedback" method="post">
    <input type="hidden" name="csrf" value="{{ csrf }}">
    <input type="hidden" name="action" value="dislike">
    <button class="fb-btn" data-action="dislike" data-section="{{ s.id }}" type="submit" title="Non mi piace">
      üëé <span class="fb-dislike">{{ s.dislikes }}</span>
    </button>
  </form>

  <form class="fb-form" action="{{ base_url }}/api/section/{{ s.id }}/feedback" method="post">
    <input type="hidden" name="csrf" value="{{ csrf }}">
    <input type="hidden" name="action" value="info">
    <button class="fb-btn" data-action="info" data-section="{{ s.id }}" type="submit" title="Richiesta info">
      ‚ÑπÔ∏è <span class="fb-info">{{ s.more_info }}</span>
    </button>
  </form>
</div>

    </div>

    {% if s.testo %}
      <div class="richtext">{{ s.testo|raw }}</div>
    {% endif %}
  </div>
</article>

        {% endfor %}
      </section>
    {% endif %}

    {# Prev/Next (ripetizione in fondo) #}
    <div class="btn-row">
      {% if prev %}
        <a class="btn" href="{{ base_url }}/giorno/{{ prev }}">‚Üê Giorno precedente</a>
      {% else %}
        <span></span>
      {% endif %}
      {% if next %}
        <a class="btn" href="{{ base_url }}/giorno/{{ next }}">Giorno successivo ‚Üí</a>
      {% endif %}
    </div>
  </div>

  {# === MODAL INDICE ‚ÄúTutti i giorni‚Äù ================================== #}
  <div class="day-index-backdrop hidden" role="dialog" aria-modal="true" aria-labelledby="idxTitle">
    <div class="day-index" tabindex="-1">
      <div class="idx-head">
        <h2 id="idxTitle">Indice del viaggio</h2>
        <button class="btn close" type="button" data-close-index="1" aria-label="Chiudi">‚úï</button>
      </div>
      <div class="idx-body">
        {% for gruppo in indice %}
          <section class="idx-group">
            <h3 class="idx-part">{{ gruppo.parte_titolo }}</h3>
            <ul class="idx-list">
              {% for g in gruppo.giorni %}
                <li>
                  <a href="{{ base_url }}/giorno/{{ g.id }}">
                    Giorno {{ g.giorno_num }} ‚Äî {{ g.titolo }}
                  </a>
                </li>
              {% endfor %}
            </ul>
          </section>
        {% endfor %}
      </div>
    </div>
  </div>

</section>

{# === JS MINIMO per il modal indice (accessibile) ========================== #}
<script>
(function(){
  var openBtn  = document.querySelector('[data-open-index]');
  var closeBtn = document.querySelector('[data-close-index]');
  var modal    = document.querySelector('.day-index-backdrop');
  var panel    = document.querySelector('.day-index');
  if (!openBtn || !modal || !panel) return;

  function open(){
    modal.classList.remove('hidden');
    // metti il focus nel panel per tastiera
    panel.focus();
    document.addEventListener('keydown', onKey);
  }
  function close(){
    modal.classList.add('hidden');
    document.removeEventListener('keydown', onKey);
    openBtn && openBtn.focus();
  }
  function onKey(e){
    if (e.key === 'Escape') close();
  }

  openBtn.addEventListener('click', open);
  (closeBtn || modal).addEventListener('click', function(e){
    if (e.target === modal || e.target === closeBtn) close();
  });
})();
</script>
<script>
(function(){
  function fitOne(el, minPx, maxPx){
    // titolo su una sola riga: calcola spazio disponibile nella colonna 1
    const head = el.closest('.panel-head');
    if (!head) return;
    const counters = head.querySelector('.counters');
    const gap = parseFloat(getComputedStyle(head).columnGap) || 0;
    const available = head.clientWidth - (counters ? (counters.offsetWidth + gap) : 0);

    let lo = minPx, hi = maxPx, best = minPx;
    // prova dimensioni con ricerca binaria
    while (lo <= hi) {
      const mid = Math.floor((lo + hi) / 2);
      el.style.fontSize = mid + 'px';
      // se la larghezza del testo entra nello spazio disponibile, prova pi√π grande
      if (el.scrollWidth <= available) { best = mid; lo = mid + 1; }
      else { hi = mid - 1; }
    }
    el.style.fontSize = best + 'px';
  }

  function run(){
    const rs = getComputedStyle(document.documentElement);
    const minPx = parseInt(rs.getPropertyValue('--h3-min-px')) || 16;
    const maxPx = parseInt(rs.getPropertyValue('--h3-max-px')) || 26;
    document.querySelectorAll('.day-page .panel-head .h3').forEach(el => fitOne(el, minPx, maxPx));
  }

  // prima passata quando i font sono caricati
  window.addEventListener('load', run);
  // ricalcola al resize (throttled)
  let t; window.addEventListener('resize', ()=>{ clearTimeout(t); t=setTimeout(run, 80); });

  // se dinamicamente cambiano i pannelli, osserva
  const ro = new ResizeObserver(()=> run());
  document.querySelectorAll('.day-page .panel-head').forEach(n => ro.observe(n));
})();
</script>
<script>
(function(){
  // --- mini toast non-invasivo ---
  function toast(msg){
    let c = document.getElementById('vu-toast');
    if(!c){
      c = document.createElement('div');
      c.id = 'vu-toast';
      c.setAttribute('aria-live','polite');
      document.body.appendChild(c);
    }
    const t = document.createElement('div');
    t.className = 'toast';
    t.textContent = msg;
    c.appendChild(t);
    requestAnimationFrame(()=> t.classList.add('show'));
    setTimeout(()=> {
      t.classList.remove('show');
      setTimeout(()=> t.remove(), 250);
    }, 2200);
  }

  function markGroup(btn){
    const group = btn.closest('.counters');
    if (!group) return;
    // opzionale: mutua esclusione like/dislike lato client
    if (btn.dataset.action === 'like' || btn.dataset.action === 'dislike') {
      group.querySelectorAll('[data-action="like"],[data-action="dislike"]').forEach(b=>{
        b.classList.add('done');
        b.setAttribute('disabled','disabled');
      });
    }
    btn.classList.add('done');
    btn.setAttribute('disabled','disabled');
  }

  async function ajaxSubmit(form){
    const btn = form.querySelector('.fb-btn');
    if(!btn) return;
    const formData = new FormData(form);
    const url = form.getAttribute('action');

    try{
      const resp = await fetch(url, {
        method: 'POST',
        credentials: 'same-origin',           // invia cookie/sessione
        headers: {'Accept':'application/json'},
        body: new URLSearchParams(formData)
      });

      // Proviamo a leggere JSON; se non √® JSON, trattiamo come errore ‚Äúsoft‚Äù
      let data = null;
      try { data = await resp.json(); } catch { data = null; }

      if (resp.ok && data && data.ok){
        // successo: aggiorna contatori e disabilita
        const root = form.closest('.counters');
        if (root && data.counts){
          const L = root.querySelector('.fb-like');
          const D = root.querySelector('.fb-dislike');
          const I = root.querySelector('.fb-info');
          if (L) L.textContent = data.counts.likes;
          if (D) D.textContent = data.counts.dislikes;
          if (I) I.textContent = data.counts.more_info;
        }
        markGroup(btn);
        toast('Grazie per il feedback!');
        return;
      }

      // Gestione ‚Äúuser friendly‚Äù degli errori comuni
      if (resp.status === 409){         // Already recorded
        markGroup(btn);                 // disabilita come se fosse gi√† cliccato
        toast('Hai gi√† registrato il tuo feedback per questa sezione.');
        return;
      }
      if (resp.status === 419){         // CSRF / sessione
        toast('Sessione scaduta. Ricarica la pagina e riprova.');
        return;
      }

      // altri errori: non aprire il JSON, avvisa soltanto
      toast('Ops, errore temporaneo. Riprova pi√π tardi.');
    }catch(e){
      // errore di rete: non aprire JSON
      toast('Connessione assente: riprova.');
    }
  }

  // Intercetta il submit dei tre form e impedisce navigazione
  document.addEventListener('submit', function(e){
    const form = e.target.closest('.fb-form');
    if (!form) return;
    e.preventDefault();
    ajaxSubmit(form);
  }, false);
})();
</script>
{% endblock %}
